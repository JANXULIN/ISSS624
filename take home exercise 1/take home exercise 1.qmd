---
title: "take home exercise 1: Geospatial Analytics for Public Good"
author: XU LIN
---

# Overview
With the advancement of our technology, GPS and RFID systems are now installed in our vehicles, particularly in public buses equipped with smart cards and GPS that collect extensive data on routes and passenger volumes. Analyzing these mobility data helps us gain a deeper understanding of people's lifestyles and habits. This understanding enables us to better manage urban systems and provides valuable information to both private and public sectors in urban transport services, assisting in making informed decisions to gain a competitive edge.

# Objective 
The objective of our study is to uncover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore by applying appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) through the method of Exploratory Spatial Data Analysis (ESDA).

# Analytical

## Get Started Setting the Analytical Tools The code chunk below installs and loads sf, spdep, tmap, tidyverse, patchwork packages into R environment. pacman() is a R package management tool.
```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, knitr, ggplot2, mapview, spdep)
```

## Data Preparation Aspatial data Passenger Volume by Origin Destination Bus Stops privoded by LTADataMall
Geospatial data \* Bus Stop Location from LTA DataMall. It privodes the bus stop code(identifier) and location coordinates. \* hexagon, a hexagon layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.)

## Importing the data into R Read the "BusStop" layer and convert it to the Singapore Land Authority coordinate system 3414.
```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

## A quick look at the busstop within an R object
```{r}
glimpse(busstop)
```

## Read the busstops
```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

## Convert to the factor
```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
```

## A quick look at odbus
```{r}
glimpse(odbus)
```

## Geovisuallisation and Analysis and use the sun function to sum the peak together
```{r}
weekdaymorning6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekdaymorning6_9))
```

```{r}
weekdayafternoon17_20 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 17 &
           TIME_PER_HOUR <= 20) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekdayafternoon17_20))
```

```{r}
weekendmorning11_14 <- odbus %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 11 &
           TIME_PER_HOUR <= 14) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekendmorning11_14))
```

```{r}
weekendevening16_19 <- odbus %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 16 &
           TIME_PER_HOUR <= 19) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekendevening16_19))
```

```{r}
all_peaks <- bind_rows(
  weekdaymorning6_9,
  weekdayafternoon17_20,
  weekendmorning11_14,
  weekendevening16_19
)
```

```{r}
all_peaks_summarized <- all_peaks %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TotalTrips = sum(TRIPS))
```

## Create the rds file
```{r}
if (!dir.exists("data/rds")) {
  dir.create("data/rds", recursive = TRUE)
}
```

## Save the all_peaks_summarized file
```{r}
write_rds(all_peaks_summarized, "data/rds/all_peaks_summarized.rds")
```

## Read the all_peaks_summarized file
```{r}
all_peaks_summarized <- read_rds("data/rds/all_peaks_summarized.rds")
```

## Join the busstop and all_peaks_summarized tables using left_join based on a common column
```{r}
busstopsallpeaks <- left_join(busstop, all_peaks_summarized,
                          by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))
```

## Create and displays an interactive map of the "busstopsallpeaks" with points colored and sized based on the "TotalTrips" column.
```{r}
mapview_busstopsallpeaks <- mapview(busstopsallpeaks, zcol = "TotalTrips", cex = 3, alpha = 0.5)
mapview_busstopsallpeaks
```

## Generate a hexagonal grid based on the spatial extent of the "busstopsallpeaks" dataset and assign a unique identifier to each hexagon.
```{r}
hexagon_grid = st_make_grid(busstopsallpeaks, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf = st_sf(geometry = hexagon_grid) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid)))
hexagon_grid_sf
```

## Calculates the number of intersections between each hexagon in a hexagonal grid and a bus stop dataset, adding this count to the hexagonal grid data. Then it creates a new dataset.
```{r}
hexagon_grid_sf$n_colli = lengths(st_intersects(hexagon_grid_sf, busstopsallpeaks))
hexagon_count_busstops = filter(hexagon_grid_sf, n_colli > 0)
```

## Draw a map called Number of busstops by use the hexagon_count_busstops
```{r}
tmap_mode("view")
map_honeycomb <- tm_shape(hexagon_count_busstops) +
  tm_fill(
    col = "n_colli",  
    palette = "Reds",
    style = "cont",
    title = "Number of busstops", 
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of busstops: " = "n_colli"  
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)  
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb
```

## Cacluate the total number of trips within each hexagonal grid cell and filter out those cells from the hexagonal grid where trips have occurred.
```{r}
intersects_list <- st_intersects(hexagon_grid_sf, busstopsallpeaks)
total_trips <- purrr::map_dbl(intersects_list, ~sum(busstopsallpeaks$TotalTrips[.x], na.rm = TRUE))
hexagon_grid_sf$TotalTrips <- total_trips
hexagon_count_totaltrips <- hexagon_grid_sf %>%
  filter(TotalTrips > 0)
```

## Create an interactive map with a hexagonal grid colred based on the values of TotalTrips, aimed at visually displaying the number of trips in different areas.
```{r}
tmap_mode("view")
map_honeycomb <- tm_shape(hexagon_count_totaltrips) +
  tm_fill(
    col = "TotalTrips",  
    palette = "Reds",
    style = "cont",
    title = "Number of TotalTrips", 
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of TotalTrips: " = "TotalTrips"  
    ),
    popup.format = list(
      TotalTrips = list(format = "f", digits = 0)  
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb
```

## Conclusion
We use visualization to examine our bus stops and TotalTrips data to assess whether the number of bus stops we have set up is reasonable and aligns with the peak times. From the overview provided by the visualization, it seems that the setup of bus stops generally corresponds with the peak travel data, indicating that the broad design is on track. For finer details, we will employ other methods of testing. A limitation is that we cannot compare bus stops and TotalTrips directly on the same graph, which would have been more intuitive.

# Moran's I test 

## Create neighbour list 
```{r}
wm_q <- poly2nb(hexagon_count_totaltrips, 
                queen=TRUE)
summary(wm_q)
```

##Create a spatial matrix for conducting the Moran's I test
```{r}
rswm_q <- nb2listw(wm_q, 
                   style="W", 
                   zero.policy = TRUE)
attributes(rswm_q) 
str(rswm_q)  
```

# Moran's I test
```{r}
moran.test(hexagon_count_totaltrips$TotalTrips, 
           listw=rswm_q, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

## Use the "bperm" to help determination 
```{r}
set.seed(1234)
bperm= moran.mc(hexagon_count_totaltrips$TotalTrips, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

## Caculate the mean
```{r}
mean(bperm$res[1:999])
```

## Caculate the variance 
```{r}
var(bperm$res[1:999])
```

## Summary 
```{r}
summary(bperm$res[1:999])
```

## Visualize the distribution of simulated Moran's I index results using a histogram
```{r}
hist(bperm$res, 
     freq=TRUE, 
     breaks=20, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

