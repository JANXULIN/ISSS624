---
title: "take home exercise 1: Geospatial Analytics for Public Good"
author: XU LIN
---


# Overview

With the advancement of our technology, GPS and RFID systems are now installed in our vehicles, particularly in public buses equipped with smart cards and GPS that collect extensive data on routes and passenger volumes. Analyzing these mobility data helps us gain a deeper understanding of people's lifestyles and habits. This understanding enables us to better manage urban systems and provides valuable information to both private and public sectors in urban transport services, assisting in making informed decisions to gain a competitive edge.

# Objective

The objective of our study is to uncover the spatial and spatio-temporal mobility patterns of public bus passengers in Singapore by applying appropriate Local Indicators of Spatial Association (LISA) and Emerging Hot Spot Analysis (EHSA) through the method of Exploratory Spatial Data Analysis (ESDA).

# Analytical

## Get Started Setting the Analytical Tools The code chunk below installs and loads sf, spdep, tmap, tidyverse, patchwork packages into R environment. pacman() is a R package management tool.


```{r}
pacman::p_load(sf, sfdep, tmap, tidyverse, knitr, ggplot2, mapview, spdep, dplyr, plotly, Kendall)
```


## Data Preparation Aspatial data Passenger Volume by Origin Destination Bus Stops privoded by LTADataMall

Geospatial data \* Bus Stop Location from LTA DataMall. It privodes the bus stop code(identifier) and location coordinates. \* hexagon, a hexagon layer of 250m (this distance is the perpendicular distance between the centre of the hexagon and its edges.)

## Importing the data into R Read the "BusStop" layer and convert it to the Singapore Land Authority coordinate system 3414.


```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```


## A quick look at the busstop within an R object


```{r}
glimpse(busstop)
```


## Read the busstops


```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```


## Convert to the factor


```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
```


## A quick look at odbus


```{r}
glimpse(odbus)
```


## Geovisuallisation and Analysis the peak time -- weekday morning, weekday afternoon, weekend morning and weekend evening.


```{r}
weekdaymorning6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekdaymorning6_9))
```

```{r}
weekdayafternoon17_20 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 17 &
           TIME_PER_HOUR <= 20) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekdayafternoon17_20))
```

```{r}
weekendmorning11_14 <- odbus %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 11 &
           TIME_PER_HOUR <= 14) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekendmorning11_14))
```

```{r}
weekendevening16_19 <- odbus %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 16 &
           TIME_PER_HOUR <= 19) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
kable(head(weekendevening16_19))
```

```{r}
weekdaymorning6_9_summarized <- weekdaymorning6_9 %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TotalTrips = sum(TRIPS))
```

```{r}
weekdayafternoon17_20_summarized <- weekdayafternoon17_20 %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TotalTrips = sum(TRIPS))
```

```{r}
weekendmorning11_14_summarized <- weekendmorning11_14 %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TotalTrips = sum(TRIPS))
```

```{r}
weekendevening16_19_summarized <- weekendevening16_19 %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TotalTrips = sum(TRIPS))
```


## Create the rds file


```{r}
if (!dir.exists("data/rds")) {
  dir.create("data/rds", recursive = TRUE)
}
```


## Save the 4 peak time period


```{r}
write_rds(weekdaymorning6_9_summarized, "data/rds/weekdaymorning6_9_summarized.rds")
write_rds(weekdayafternoon17_20_summarized, "data/rds/weekdayafternoon17_20_summarized.rds")
write_rds(weekendmorning11_14_summarized, "data/rds/weekendmorning11_14_summarized.rds")
write_rds(weekendevening16_19_summarized, "data/rds/weekendevening16_19_summarized.rds")
```

```{r}
weekdaymorning6_9_summarized <- read_rds("data/rds/weekdaymorning6_9_summarized.rds")
weekdayafternoon17_20_summviewarized <- read_rds("data/rds/weekdayafternoon17_20_summarized.rds")
weekendmorning11_14_summarized <- read_rds("data/rds/weekendmorning11_14_summarized.rds")
weekendevening16_19_summarized <- read_rds("data/rds/weekendevening16_19_summarized.rds")
```


## Left join busstop and peak time


```{r}
busstops_weekday_morning <- left_join(busstop, weekdaymorning6_9_summarized, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))
busstops_weekday_afternoon <- left_join(busstop, weekdayafternoon17_20_summarized, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))
busstops_weekend_morning <- left_join(busstop, weekendmorning11_14_summarized, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))
busstops_weekend_evening <- left_join(busstop, weekendevening16_19_summarized, by = c("BUS_STOP_N" = "ORIGIN_PT_CODE"))
```


## Draw 4 Hexagon


```{r}
hexagon_grid_weekday_morning <- st_make_grid(busstops_weekday_morning, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf_weekday_morning <- st_sf(geometry = hexagon_grid_weekday_morning) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid_weekday_morning)))
```

```{r}
hexagon_grid_weekday_afternoon <- st_make_grid(busstops_weekday_afternoon, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf_weekday_afternoon <- st_sf(geometry = hexagon_grid_weekday_afternoon) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid_weekday_afternoon)))
```

```{r}
hexagon_grid_weekend_morning <- st_make_grid(busstops_weekend_morning, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf_weekend_morning <- st_sf(geometry = hexagon_grid_weekend_morning) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid_weekend_morning)))
```

```{r}
hexagon_grid_weekend_evening <- st_make_grid(busstops_weekend_evening, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf_weekend_evening<- st_sf(geometry = hexagon_grid_weekend_evening) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid_weekend_evening)))
```


## Show busstop map


```{r}
hexagon_grid_weekday_morning <- st_make_grid(busstops_weekday_morning, cellsize = c(250, 250), what = "polygons", square = FALSE)
hexagon_grid_sf_weekday_morning <- st_sf(geometry = hexagon_grid_weekday_morning) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid_weekday_morning)))
hexagon_grid_sf_weekday_morning$n_colli = lengths(st_intersects(hexagon_grid_sf_weekday_morning, busstops_weekday_morning))
hexagon_count_busstops_weekday_morning = filter(hexagon_grid_sf_weekday_morning, n_colli > 0)
```

```{r}
map_honeycomb <- tm_shape(hexagon_count_busstops_weekday_morning) +
  tm_fill(
    col = "n_colli",  
    palette = "Reds",
    style = "cont",
    title = "Number of busstops", 
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of busstops: " = "n_colli"  
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)  
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb
tmap_mode("plot")
```


## Draw 4 peak time maps


```{r}
intersects_list_morning <- st_intersects(hexagon_grid_sf_weekday_morning, busstops_weekday_morning)
total_trips_morning <- purrr::map_dbl(intersects_list_morning, ~sum(busstops_weekday_morning$TotalTrips[.x], na.rm = TRUE))
hexagon_grid_sf_weekday_morning$TotalTrips <- total_trips_morning
hexagon_count_totaltrips_morning <- hexagon_grid_sf_weekday_morning %>%
  filter(TotalTrips > 0)
```

```{r}
map_honeycomb_morning <- tm_shape(hexagon_count_totaltrips_morning) +
  tm_fill(
    col = "TotalTrips",  
    palette = "Reds",
    style = "cont",
    title = "Number of TotalTrips - Morning", 
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c("Number of TotalTrips: " = "TotalTrips"),
    popup.format = list(TotalTrips = list(format = "f", digits = 0))
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb_morning
```

```{r}
intersects_list_afternoon <- st_intersects(hexagon_grid_sf_weekday_afternoon, busstops_weekday_afternoon)
total_trips_afternoon <- purrr::map_dbl(intersects_list_afternoon, ~sum(busstops_weekday_afternoon$TotalTrips[.x], na.rm = TRUE))
hexagon_grid_sf_weekday_afternoon$TotalTrips <- total_trips_afternoon
hexagon_count_totaltrips_afternoon <- hexagon_grid_sf_weekday_afternoon %>%
  filter(TotalTrips > 0)
```

```{r}
map_honeycomb_afternoon <- tm_shape(hexagon_count_totaltrips_afternoon) +
  tm_fill(
    col = "TotalTrips",  
    palette = "Reds",
    style = "cont",
    title = "Number of TotalTrips - Afternoon", 
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c("Number of TotalTrips: " = "TotalTrips"),
    popup.format = list(TotalTrips = list(format = "f", digits = 0))
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb_afternoon
```

```{r}
intersects_list_weekend_morning <- st_intersects(hexagon_grid_sf_weekend_morning, busstops_weekend_morning)
total_trips_weekend_morning <- purrr::map_dbl(intersects_list_weekend_morning, ~sum(busstops_weekend_morning$TotalTrips[.x], na.rm = TRUE))
hexagon_grid_sf_weekend_morning$TotalTrips <- total_trips_weekend_morning
hexagon_count_totaltrips_weekend_morning <- hexagon_grid_sf_weekend_morning %>%
  filter(TotalTrips > 0)
```

```{r}
map_honeycomb_weekend_morning <- tm_shape(hexagon_count_totaltrips_weekend_morning) +
  tm_fill(
    col = "TotalTrips",  
    palette = "Reds",
    style = "cont",
    title = "Number of TotalTrips - Weekend Morning", 
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c("Number of TotalTrips: " = "TotalTrips"),
    popup.format = list(TotalTrips = list(format = "f", digits = 0))
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb_weekend_morning
```

```{r}
intersects_list_weekend_evening <- st_intersects(hexagon_grid_sf_weekend_evening, busstops_weekend_evening)
total_trips_weekend_evening <- purrr::map_dbl(intersects_list_weekend_evening, ~sum(busstops_weekend_evening$TotalTrips[.x], na.rm = TRUE))
hexagon_grid_sf_weekend_evening$TotalTrips <- total_trips_weekend_evening
hexagon_count_totaltrips_weekend_evening <- hexagon_grid_sf_weekend_evening %>%
  filter(TotalTrips > 0)
```

```{r}
map_honeycomb_weekend_evening <- tm_shape(hexagon_count_totaltrips_weekend_evening)+
  tm_fill(
    col = "TotalTrips",  
    palette = "Reds",
    style = "cont",
    title = "Number of TotalTrips - Weekend Evening", 
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c("Number of TotalTrips: " = "TotalTrips"),
    popup.format = list(TotalTrips = list(format = "f", digits = 0))
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb_weekend_evening
tmap_mode("plot")
```


## Conclusion

Based on this map, we can see that the traffic during the usual morning and evening peak hours and the weekend peak hours are quite similar. By comparing the entire scenario, we can deduce that the design of the bus stops is very consistent with the peak travel times. From the map, we can also identify a few particular points, such as 4982 and 5478, where the number of people is relatively high at all four time points. The map only provides some general and rough information; we need a more detailed analysis to assess whether our bus route design is reasonable.

# Analysis Lisa

## LISA peak time weekday morning


```{r}
wm_q <- hexagon_count_totaltrips_morning %>%
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

```{r}
moranI <- global_moran(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

```{r}
global_moran_test(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
```

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TotalTrips, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```


## LISA peak time weekday afternoon


```{r}
wm_q <- hexagon_count_totaltrips_afternoon %>%
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

```{r}
moranI <- global_moran(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

```{r}
global_moran_test(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
```

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TotalTrips, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```


## LISA peak time weekend morning


```{r}
wm_q <- hexagon_count_totaltrips_weekend_morning %>%
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

```{r}
moranI <- global_moran(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

```{r}
global_moran_test(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
```

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TotalTrips, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```


## LISA peak time weekend evening


```{r}
wm_q <- hexagon_count_totaltrips_weekend_evening %>%
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

```{r}
moranI <- global_moran(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
glimpse(moranI)
```

```{r}
global_moran_test(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt)
```

```{r}
set.seed(1234)
```

```{r}
global_moran_perm(wm_q$TotalTrips,
                       wm_q$nb,
                       wm_q$wt,
                  nsim = 99)
```

```{r}
lisa <- wm_q %>% 
  mutate(local_moran = local_moran(
    TotalTrips, nb, wt, nsim = 99),
         .before = 1) %>%
  unnest(local_moran)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
tm_shape(lisa) +
  tm_fill("p_ii_sim") + 
  tm_borders(alpha = 0.5) +
   tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(lisa) +
  tm_fill("ii") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "local Moran's I of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(lisa) +
  tm_fill("p_ii_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
              labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of local Moran's I",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
lisa_sig <- lisa  %>%
  filter(p_ii_sim < 0.05)
tmap_mode("plot")
tm_shape(lisa) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4)
```


##Conclusion In the complete LISA (Local Indicators of Spatial Association) analysis, we utilize two metrics to identify spatial patterns. Initially, we examine the p-values (displayed in the right-hand map) to determine areas with statistically significant spatial autocorrelation. Regions with p-values less than 0.05 suggest that observed values are unlikely to be randomly distributed and instead exhibit significant spatial correlation with surrounding areas. These significant clusters indicate some form of spatial interaction or mutual influence, potentially due to a combination of geographical, social, economic, or other environmental factors.We need focus on the High-Low and Low-High areas, as these regions are somewhat anomalous compared to others.

Subsequently, we assess the values of the Local Moran's I (depicted in the left-hand map). Here, positive values denote spatial clusters, indicating similarity in observed values between a region and its neighbors. Negative values reveal spatial outliers, where a region's values significantly differ from its surroundings, which may highlight unique characteristics or conditions of that area. Further analysis enables us to explore the potential causes behind these clusters and outliers, as well as their specific impacts on the study area.

##Limitation

We have identified regions that may exhibit spatial autocorrelation. Due to the lack of relevant economic and environmental information, further analysis would require us to continue based on the data available.

# HCSA

## HSCA for weekday morning


```{r}
wm_idw <- hexagon_count_totaltrips_morning %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    TotalTrips, nb, wt, nsim = 499),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
cbg <- HCSA %>% 
  ungroup() %>% 
  select(geometry, TotalTrips, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = TotalTrips, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```


## HCSA for weekday afternoon


```{r}
wm_idw <- hexagon_count_totaltrips_afternoon %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    TotalTrips, nb, wt, nsim = 499),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
cbg <- HCSA %>% 
  ungroup() %>% 
  select(geometry, TotalTrips, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = TotalTrips, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```


## HCSA for weekday afternoon


```{r}
wm_idw <- hexagon_count_totaltrips_afternoon %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    TotalTrips, nb, wt, nsim = 499),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
cbg <- HCSA %>% 
  ungroup() %>% 
  select(geometry, TotalTrips, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = TotalTrips, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```


## HCSA for weekend morning


```{r}
wm_idw <- hexagon_count_totaltrips_weekend_morning %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    TotalTrips, nb, wt, nsim = 499),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
cbg <- HCSA %>% 
  ungroup() %>% 
  select(geometry, TotalTrips, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = TotalTrips, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```


## HCSA for weekend evening


```{r}
wm_idw <- hexagon_count_totaltrips_weekend_evening %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

```{r}
HCSA <- wm_idw %>% 
  mutate(local_Gi = local_gstar_perm(
    TotalTrips, nb, wt, nsim = 499),
         .before = 1) %>%
  unnest(local_Gi)
HCSA
```

```{r}
cbg <- HCSA %>% 
  ungroup() %>% 
  select(geometry, TotalTrips, gi_star)
```

```{r}
ggplot(data = cbg, 
       aes(x = TotalTrips, 
           y = gi_star)) +
  geom_line() +
  theme_light()
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8))
```

```{r}
tmap_mode("plot")
tm_shape(HCSA) +
  tm_fill("p_sim") + 
  tm_borders(alpha = 0.5)
```

```{r}
tmap_mode("plot")
map1 <- tm_shape(HCSA) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.5) +
  tm_view(set.zoom.limits = c(6,8)) +
  tm_layout(main.title = "Gi* of Totaltrips",
            main.title.size = 0.8)

map2 <- tm_shape(HCSA) +
  tm_fill("p_sim",
          breaks = c(0, 0.001, 0.01, 0.05, 1),
          labels = c("0.001", "0.01", "0.05", "Not sig")) + 
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "p-value of Gi*",
            main.title.size = 0.8)

tmap_arrange(map1, map2, ncol = 2)
```

```{r}
HCSA_sig <- HCSA  %>%
  filter(p_sim < 0.05)
tmap_mode("plot")
tm_shape(HCSA) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4)
```


## Conclusion

Through the hot and cold spot analysis, there are four areas with notably high GI values that we can focus on in subsequent analyses. Due to the lack of relevant economic and environmental information, we can only determine that these four areas significantly exceed the average level. Moving forward, we can delve into the reasons behind this by gathering more data and documentation.

