---
title: "take home exercise 2 Singapore public bus commuter flows"
author: "Xu Lin"
---

#overview We currently have data on people's movement patterns as well as information on schools, businesses, and retail activities in different areas. The goal of this task is to identify common Saturday activities among the population. Through our analysis, we aim to provide recommendations to the government, suggesting potential enhancements to existing facilities or proposing the development of new amenities that align with people's preferences. The objective is to make these facilities more appealing and strategically located for the community's convenience.

#Objective Our goal is to pinpoint popular weekend destinations, analyze the main facilities in those areas, and provide recommendations accordingly.

#Data Geospatial data: Passenger Volume by Origin Destination Bus Stops, Bus Stop Location, Train Station and Train Station Exit Point, Master Plan 2019 Subzone Boundary, HDB Property Information, Business, Entertn, F&B, FinServ, Leisure&Recreation and Retails. Aspatial data: HDB Property Information. This data is for us to use.

#Import the data

```{r}
pacman::p_load(tmap, sf, DT, stplanr, sp, dplyr,
               performance, reshape2, units, 
               ggpubr, tidyverse, mapview, httr, sfheaders, knitr, kableExtra)
```

#Importing the OD data

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

```{r}
glimpse(odbus)
```

```{r}
weekendmorning11_14 <- odbus %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14) %>%
  group_by(ORIGIN_PT_CODE, DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS), .groups = 'keep')
```

```{r}
datatable(weekendmorning11_14)
```

```{r}
write_rds(weekendmorning11_14, "data/rds/weekendmorning11_14.rds")
```

```{r}
weekendmorning11_14 <- read_rds("data/rds/weekendmorning11_14.rds")
```

#Working with Geospatial Data

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(busstop)
```

```{r}
busstop_points = busstop %>%
  st_as_sf(coords = c("geometry"), crs = 3414, remove = FALSE)
```

```{r}
mapview_busstop_points = mapview(busstop_points, cex = 0.5, alpha = .5, popup = NULL)
mapview_busstop_points
```

```{r}
area_honeycomb_grid = st_make_grid(busstop_points, c(375, 375), what = "polygons", square = FALSE)
honeycomb_grid_sf = st_sf(area_honeycomb_grid) %>%
  mutate(grid_id = 1:length(lengths(area_honeycomb_grid)))
honeycomb_grid_sf$n_colli = lengths(st_intersects(honeycomb_grid_sf, busstop_points))
honeycomb_count = filter(honeycomb_grid_sf, n_colli > 0)
```

```{r}
map_honeycomb = tm_shape(honeycomb_count) +
  tm_fill(
    col = "n_colli",
    palette = "Reds",
    style = "cont",
    title = "Number of collisions",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c(
      "Number of collisions: " = "n_colli"
    ),
    popup.format = list(
      n_colli = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
map_honeycomb
tmap_mode("plot")
```

```{r}
busstop_honeycomb_count <- st_intersection(busstop, honeycomb_count) %>%
  select(BUS_STOP_N, grid_id) %>%
  st_drop_geometry()
```

```{r}
glimpse(busstop_honeycomb_count)
```

```{r}
write_rds(busstop_honeycomb_count, "data/rds/busstop_honeycomb_count.rds")  
```

```{r}
weekendmorning11_14 <- left_join(weekendmorning11_14 , busstop_honeycomb_count,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = grid_id,
         DESTIN_BS = DESTINATION_PT_CODE)
```

```{r}
duplicate <- weekendmorning11_14 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
weekendmorning11_14 <- unique(weekendmorning11_14)
```

```{r}
weekendmorning11_14 <- left_join(weekendmorning11_14 , busstop_honeycomb_count,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- weekendmorning11_14 %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
weekendmorning11_14 <- unique(weekendmorning11_14)
```

```{r}
weekendmorning11_14 <- weekendmorning11_14 %>%
  rename(DESTIN_SZ = grid_id) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(WEEKENDDAYMORNING_PEAK = sum(TRIPS))
```

```{r}
write_rds(weekendmorning11_14, "data/rds/weekendmorning11_14.rds")
```

```{r}
weekendmorning11_14 <- read_rds("data/rds/weekendmorning11_14.rds")
```

```{r}
weekendmorning11_14_1 <- weekendmorning11_14[weekendmorning11_14$ORIGIN_SZ!=weekendmorning11_14$DESTIN_SZ,]
```

```{r}
flowLine <- od2line(flow = weekendmorning11_14_1, 
                    zones = honeycomb_count,
                    zone_code = "grid_id")
```

```{r}
tm_shape(honeycomb_count) +
  tm_polygons() +
flowLine %>%  
tm_shape() +
  tm_lines(lwd = "WEEKENDDAYMORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

```{r}
tm_shape(honeycomb_count) +
  tm_polygons() +
flowLine %>%  
  filter(WEEKENDDAYMORNING_PEAK >= 2000) %>%
tm_shape() +
  tm_lines(lwd = "WEEKENDDAYMORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

# Caculate the distance

```{r}
honeycomb_count <- read_rds("data/rds/honeycomb_count.rds")
honeycomb_count
```

```{r}
honeycomb_count_sp <- as(honeycomb_count, "Spatial")
honeycomb_count_sp
```

```{r}
dist <- spDists(honeycomb_count_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

```{r}
sz_names <- honeycomb_count$grid_id
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair %>%
  summary()
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

```{r}
write_rds(distPair, "data/rds/distPair.rds") 
```

```{r}
weekendmorning11_14 <- read_rds("data/rds/weekendmorning11_14.rds")
```

```{r}
flow_data <- weekendmorning11_14 %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(WEEKENDDAYMORNING_PEAK)) 
```

```{r}
head(flow_data)
```

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)
```

```{r}
flow_data$ORIGIN_SZ <- as.integer(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.integer(flow_data$DESTIN_SZ)
```

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

```{r}
flow_data1 <- flow_data1 %>%
  left_join(honeycomb_count,
            by = c("DESTIN_SZ" = "grid_id")) %>%
  rename(DIST = dist)
```

```{r}
summary(flow_data1)
```

```{r}
write_rds(flow_data1,
          "data/rds/flow_data1.rds")
```

# Make flow data with weekend activies

```{r}
url<-"https://www.onemap.gov.sg/api/common/elastic/search"

csv<-read_csv("data/aspatial/Generalinformationofschools.csv")
postcodes<-csv$`postal_code`

found<-data.frame()
not_found<-data.frame()

for(postcode in postcodes){
  query<-list('searchVal'=postcode,'returnGeom'='Y','getAddrDetails'='Y','pageNum'='1')
  res<- GET(url,query=query)
  
  if((content(res)$found)!=0){
    found<-rbind(found,data.frame(content(res))[4:13])
  } else{
    not_found = data.frame(postcode)
  }
}
```

```{r}
merged = merge(csv, found, by.x = 'postal_code', by.y = 'results.POSTAL', all = TRUE)
write.csv(merged, file = "data/aspatial/schools.csv")
write.csv(not_found, file = "data/aspatial/not_found.csv")
```

```{r}
schools <- read_csv("data/aspatial/schools.csv") %>%
  rename(latitude = "results.LATITUDE",
         longitude = "results.LONGITUDE")%>%
  select(postal_code, school_name, latitude, longitude)
```

```{r}
schools <- schools[complete.cases(schools$longitude, schools$latitude), ]
schools_sf <- st_as_sf(schools, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(honeycomb_count) +
  tm_polygons() +
tm_shape(schools_sf) +
  tm_dots()
tmap_mode("plot")
```

```{r}
honeycomb_count$`SCHOOL_COUNT`<- lengths(
  st_intersects(
   honeycomb_count, schools_sf))
```

```{r}
summary(honeycomb_count$SCHOOL_COUNT)
```

##公交站转换

```{r}
RTSS_sf <- st_read(dsn = "data/geospatial/",
                layer = "RapidTransitSystemStation")%>%
  st_transform(crs = 3414)
```

```{r}
RTSS_sf_polygons <- RTSS_sf[st_is_valid(RTSS_sf), ]
RTSS_sf_points <- st_centroid(RTSS_sf_polygons)
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(honeycomb_count) +
  tm_polygons() +
tm_shape(RTSS_sf_points) +
  tm_dots()
tmap_mode("plot")
```

```{r}
honeycomb_count$`RTSS_COUNT`<- lengths(
  st_intersects(
    honeycomb_count, RTSS_sf_points))
```

```{r}
summary(honeycomb_count$`RTSS_COUNT`)
```

## entertn

```{r}
entertn_sf <- st_read(dsn = "data/geospatial/",
                layer = "entertn")%>%
  st_transform(crs = 3414)
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(honeycomb_count) +
  tm_polygons() +
tm_shape(entertn_sf) +
  tm_dots()
tmap_mode("plot")
```

```{r}
honeycomb_count$`ENTERTN_COUNT`<- lengths(
  st_intersects(
    honeycomb_count, entertn_sf))
```

```{r}
summary(honeycomb_count$ENTERTN_COUNT)
```

## Liesure&Recreation

```{r}
lr_sf <- st_read(dsn = "data/geospatial/",
                                    layer = "Liesure&Recreation") %>%
  st_transform(crs = 3414)
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(honeycomb_count) +
  tm_polygons() +
tm_shape(lr_sf) +
  tm_dots()
tmap_mode("plot")
```

```{r}
honeycomb_count$`LR_COUNT`<- lengths(
  st_intersects(
    honeycomb_count, lr_sf))
```

```{r}
summary(honeycomb_count$LR_COUNT)
```

##Retails

```{r}
retails_sf <- st_read(dsn = "data/geospatial/",
                layer = "Retails")%>%
  st_transform(crs = 3414)
```

```{r}
tmap_options(check.and.fix = TRUE)
tm_shape(honeycomb_count) +
  tm_polygons() +
tm_shape(retails_sf) +
  tm_dots()
tmap_mode("plot")
```

```{r}
honeycomb_count$`RETAILS_COUNT`<- lengths(
  st_intersects(
    honeycomb_count, retails_sf))
```

```{r}
summary(honeycomb_count$RETAILS_COUNT)
```

#数据整合

```{r}
honeycomb_count_tidy <- honeycomb_count %>%
  st_drop_geometry() %>%
  select(grid_id, SCHOOL_COUNT, RTSS_COUNT, ENTERTN_COUNT, LR_COUNT, RETAILS_COUNT)
```

```{r}
flow_data1 <- flow_data1 %>%
  left_join(honeycomb_count_tidy,
            by = c("DESTIN_SZ" = "grid_id")) 
```

```{r}
summary(flow_data1)
```

```{r}
flow_data1$SCHOOL_COUNT <- ifelse(
  flow_data1$SCHOOL_COUNT == 0,
  0.99, flow_data1$SCHOOL_COUNT)
flow_data1$RTSS_COUNT <- ifelse(
  flow_data1$RTSS_COUNT == 0,
  0.99, flow_data1$RTSS_COUNT)
flow_data1$ENTERTN_COUNT <- ifelse(
  flow_data1$ENTERTN_COUNT == 0,
  0.99, flow_data1$ENTERTN_COUNT)
flow_data1$LR_COUNT <- ifelse(
  flow_data1$LR_COUNT == 0,
  0.99, flow_data1$LR_COUNT)
flow_data1$RETAILS_COUNT <- ifelse(
  flow_data1$RETAILS_COUNT == 0,
  0.99, flow_data1$RETAILS_COUNT)
```

```{r}
summary(flow_data1)
```

```{r}
write_rds(flow_data1,
          "data/rds/flow_data_tidy.rds")
```

##SIM

```{r}
flow_data2 <- read_rds("data/rds/flow_data_tidy.rds")
```

```{r}
flow_data2 <- flow_data2 %>%
  mutate(ORIGIN_SZ = as.character(ORIGIN_SZ), DESTIN_SZ = as.character(DESTIN_SZ))
```

```{r}
glimpse(flow_data2)
```

```{r}
kable(head(flow_data2[, 1:5], n = 5))
```

```{r}
flow_data2$FlowNoIntra <- ifelse(
  flow_data2$ORIGIN_SZ == flow_data2$DESTIN_SZ, 
  0, flow_data2$TRIPS)
flow_data2$offset <- ifelse(
  flow_data2$ORIGIN_SZ == flow_data2$DESTIN_SZ, 
  0.000001, 1)
```

```{r}
inter_zonal_flow <- flow_data2 %>%
  filter(FlowNoIntra > 0)
```



